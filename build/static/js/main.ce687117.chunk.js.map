{"version":3,"sources":["serviceWorker.js","component/common/Helmet.jsx","index.js"],"names":["isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","onUpdate","onSuccess","catch","error","PageHelmet","Component","render","React","createElement","Fragment","Helmet","this","props","pageTitle","name","content","Error404","lazy","PortfolioLanding","Root","Router","Suspense","fallback","Switch","Route","exact","path","concat","process","component","ReactDOM","document","getElementById","URL","href","origin","addEventListener","fetch","response","contentType","headers","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"mNAYA,MAAMA,EAAcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DAsCN,SAASC,EAAgBC,EAAOC,GAC9BC,UAAUC,cACPC,SAASJ,GACTK,KAAKC,IACJA,EAAaC,cAAgB,KAC3B,MAAMC,EAAmBF,EAAaG,WACd,MAApBD,IAGJA,EAAiBE,cAAgB,KACA,cAA3BF,EAAiBG,QACfT,UAAUC,cAAcS,YAI1BC,QAAQC,IACN,iHAKEb,GAAUA,EAAOc,UACnBd,EAAOc,SAAST,KAMlBO,QAAQC,IAAI,sCAGRb,GAAUA,EAAOe,WACnBf,EAAOe,UAAUV,UAO5BW,MAAMC,IACLL,QAAQK,MAAM,4CAA6CA,K,YC7FjE,MAAMC,UAAmBC,YACrBC,SACI,OACIC,IAAAC,cAACD,IAAME,SAAQ,KACXF,IAAAC,cAACE,SAAM,KACHH,IAAAC,cAAA,aAAQG,KAAKC,MAAMC,WACnBN,IAAAC,cAAA,QAAMM,KAAK,cAAcC,QAAQ,6DACjCR,IAAAC,cAAA,QAAMM,KAAK,WAAWC,QAAQ,yIAC9BR,IAAAC,cAAA,QAAMM,KAAK,SAASC,QAAQ,wBASjCX,QCbf,MAAMY,EAAWC,eAAK,IAAM,2DACtBC,EAAmBD,eAAK,IAAM,2DAEpC,MAAME,UAAad,YACfC,SACI,OACIC,IAAAC,cAACY,IAAM,KACHb,IAAAC,cAACJ,EAAU,CAACS,UAAU,qBACtBN,IAAAC,cAACa,WAAQ,CAACC,SAAUf,IAAAC,cAAA,WAAK,sBACrBD,IAAAC,cAACe,IAAM,KACHhB,IAAAC,cAACgB,IAAK,CAACC,OAAK,EAACC,KAAI,GAAAC,OAAKC,GAAsB,KAAKC,UAAWX,IAC5DX,IAAAC,cAACgB,IAAK,CAACE,KAAI,GAAAC,OAAKC,GAAsB,QAAQC,UAAWb,IACzDT,IAAAC,cAACgB,IAAK,CAACK,UAAWb,QAQ1Cc,IAASxB,OAAOC,IAAAC,cAACW,EAAI,MAAKY,SAASC,eAAe,SFL3C,SAAkB9C,GACvB,GAA6C,kBAAmBC,UAAW,CAGzE,GADkB,IAAI8C,IAAIL,GAAwBhD,OAAOC,SAASqD,MACpDC,SAAWvD,OAAOC,SAASsD,OAIvC,OAGFvD,OAAOwD,iBAAiB,OAAQ,KAC9B,MAAMnD,EAAK,GAAA0C,OAAMC,GAAsB,sBAEnClD,IAgEV,SAAiCO,EAAOC,GAEtCmD,MAAMpD,GACHK,KAAKgD,IAEJ,MAAMC,EAAcD,EAASE,QAAQC,IAAI,gBAEnB,MAApBH,EAASI,QACO,MAAfH,IAA8D,IAAvCA,EAAYI,QAAQ,cAG5CxD,UAAUC,cAAcwD,MAAMtD,KAAKC,IACjCA,EAAasD,aAAavD,KAAK,KAC7BV,OAAOC,SAASiE,aAKpB9D,EAAgBC,EAAOC,KAG1BgB,MAAM,KACLJ,QAAQC,IACN,mEArFAgD,CAAwB9D,EAAOC,GAI/BC,UAAUC,cAAcwD,MAAMtD,KAAK,KACjCQ,QAAQC,IACN,gHAMJf,EAAgBC,EAAOC,MEtB/BE,K","file":"static/js/main.ce687117.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React, { Component } from \"react\";\r\nimport { Helmet } from 'react-helmet'\r\n\r\nclass PageHelmet extends Component {\r\n    render() {\r\n        return (\r\n            <React.Fragment>\r\n                <Helmet>\r\n                    <title>{this.props.pageTitle}</title>\r\n                    <meta name=\"description\" content=\"GoldHood Service - Professional Hood Cleaning in Florida\" />\r\n                    <meta name=\"keywords\" content=\"hood cleaning, Florida, Deltona, Orlando, Cocoa Beach, gold hood service, exhaust systeam cleaning, house washing, concrete cleaning\" />\r\n                    <meta name=\"author\" content=\"GoldHood Service\" />\r\n                </Helmet>\r\n\r\n            </React.Fragment>\r\n        )\r\n    }\r\n}\r\n\r\n\r\nexport default PageHelmet;\r\n","import React, { Component, Suspense, lazy } from 'react';\nimport ReactDOM from 'react-dom';\nimport { BrowserRouter as Router, Switch, Route } from 'react-router-dom';\nimport './index.scss';\nimport * as serviceWorker from './serviceWorker';\nimport PageHelmet from \"./component/common/Helmet\";\n\nconst Error404 = lazy(() => import(\"./elements/error404\"));\nconst PortfolioLanding = lazy(() => import('./home/PortfolioLanding'));\n\nclass Root extends Component {\n    render() {\n        return (\n            <Router>\n                <PageHelmet pageTitle='GoldHood Service' />\n                <Suspense fallback={<div>Betöltés...</div>}>\n                    <Switch>\n                        <Route exact path={`${process.env.PUBLIC_URL}/`} component={PortfolioLanding} />\n                        <Route path={`${process.env.PUBLIC_URL}/404`} component={Error404} />\n                        <Route component={Error404} />\n                    </Switch>\n                </Suspense>\n            </Router>\n        )\n    }\n}\n\nReactDOM.render(<Root />, document.getElementById('root'));\nserviceWorker.register();"],"sourceRoot":""}